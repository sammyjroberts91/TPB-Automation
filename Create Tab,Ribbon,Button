#region Namespaces
using Autodesk.Revit.ApplicationServices;
using Autodesk.Revit.Attributes;
using Autodesk.Revit.DB;
using Autodesk.Revit.UI;
using System;
using System.Collections.Generic;
using System.Drawing;
using System.Drawing.Imaging;
using System.IO;
using System.Reflection;
using System.Windows.Media;
using System.Windows.Media.Imaging;

#endregion

namespace CarbonDashboardExport
{
    class App : IExternalApplication
    {

        const string RIBBON_TAB = "Sustainability";
        const string RIBBON_PANEL = "Carbon Dashboard";

        public Result OnStartup(UIControlledApplication a)
        {

            // get the ribbon tab
            try
            {
                a.CreateRibbonTab(RIBBON_TAB);
            }
            catch (Exception) { } //tab already exists  


            //Create PAnel       
            RibbonPanel panel = null;
            List<RibbonPanel> panels = a.GetRibbonPanels(RIBBON_TAB);
            foreach (RibbonPanel pnl in panels)
            {
                if (pnl.Name == RIBBON_PANEL)
                {
                    panel = pnl;
                    break;
                }
            }

            // cant find panel create it

            if (panel == null)

            {
                panel = a.CreateRibbonPanel(RIBBON_TAB, RIBBON_PANEL);
            }

            // get the image for the panel

            Image img = Properties.Resources.CarbonExport32;
            ImageSource imgsrc = GetImageSource(img);

            //Get the push button data

            PushButtonData btndata = new PushButtonData(
            "Carbon Data Export",
            "Carbon Data Export",
            Assembly.GetExecutingAssembly().Location,
            "CarbonDashboardExport.Command"
            )

            {
                ToolTip = "Export Pthe project data to a carbon dashboard",
                LongDescription = "Get the Carbon Values for this project and export to a Project Dashboard",
                Image = imgsrc,
                LargeImage = imgsrc,

            };

            //add button to panel

            // Add the button
            PushButton button = panel.AddItem(btndata) as PushButton;
            button.Enabled = true;


            return Result.Succeeded;
        }

        public Result OnShutdown(UIControlledApplication a)
        {
            return Result.Succeeded;
        }

        private BitmapSource GetImageSource(Image img)
        {
            BitmapImage bmp = new BitmapImage();
            using (MemoryStream ms = new MemoryStream())

            {
                img.Save(ms, ImageFormat.Png);
                ms.Position = 0;

                bmp.BeginInit();

                bmp.CacheOption = BitmapCacheOption.OnLoad;
                bmp.UriSource = null;
                bmp.StreamSource = ms;


                bmp.EndInit();
            }

            return bmp;
        }
    }
}
