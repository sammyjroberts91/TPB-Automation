#region Namespaces
using Autodesk.Revit.ApplicationServices;
using Autodesk.Revit.Attributes;
using Autodesk.Revit.DB;
using Autodesk.Revit.UI;
using Autodesk.Revit.UI.Selection;
using System;
using System.Collections.Generic;
using System.Diagnostics;

#endregion

namespace ViewportsAlign
{
    [Transaction(TransactionMode.Manual)]
    public class Command : IExternalCommand
    {
        public Result Execute(
          ExternalCommandData commandData,
          ref string message,
          ElementSet elements)
        {
            UIApplication uiapp = commandData.Application;
            UIDocument uidoc = uiapp.ActiveUIDocument;
            Application app = uiapp.Application;
            Document doc = uidoc.Document;

            

            //Get Parent View Details
            Reference reference = uidoc.Selection.PickObject(ObjectType.Element, "Select Parent View");
            Viewport element = (Viewport)uidoc.Document.GetElement(reference);
            BoundingBoxXYZ bounding = element.get_BoundingBox(doc.ActiveView);
            XYZ refcentre = 0.5 * (bounding.Max + bounding.Min);        
            Parameter P = element.get_Parameter(BuiltInParameter.VIEWER_VOLUME_OF_INTEREST_CROP);


            

            //fremove  views without scopebox

            if (P != null)

            {           


            Element El = doc.GetElement(P.AsElementId());
            
            ElementId sheetdi1 = element.SheetId;
            var titleblockId1 = new FilteredElementCollector(doc, sheetdi1).OfCategory(BuiltInCategory.OST_TitleBlocks).FirstElementId();
            Element tbf1 = doc.GetElement(titleblockId1);
            Element elemType1 = doc.GetElement(tbf1.GetTypeId());
            XYZ boxCentre = element.GetBoxCenter();

            FilteredElementCollector docCollector = new FilteredElementCollector(doc).OfCategory(BuiltInCategory.OST_Viewports);


            foreach(Viewport vp in docCollector)
            {

                string viewname = vp.Name;
                Parameter P2 = vp.get_Parameter(BuiltInParameter.VIEWER_VOLUME_OF_INTEREST_CROP);
                Element El2 = doc.GetElement(P2.AsElementId());
                
                ElementId sheetdi2 = vp.SheetId;
                var titleblockId2 = new FilteredElementCollector(doc, sheetdi2).OfCategory(BuiltInCategory.OST_TitleBlocks).FirstElementId();
                Element tbf2 = doc.GetElement(titleblockId2);

                Element elemType2 = doc.GetElement(tbf2.GetTypeId());
                Element sheeele = doc.GetElement(sheetdi2);

                    if (El2 != null
                        && El.Name == El2.Name
                            && tbf1.Name == tbf2.Name)

                    {

                       
                            using (Transaction tx1 = new Transaction(doc))

                            {
                                tx1.Start("align the viewports");
                                {
                                    vp.SetBoxCenter(boxCentre);
                                }
                                tx1.Commit();
                            }
                    }
   
                }
            }  
            return Result.Succeeded;
        }
    }
}

